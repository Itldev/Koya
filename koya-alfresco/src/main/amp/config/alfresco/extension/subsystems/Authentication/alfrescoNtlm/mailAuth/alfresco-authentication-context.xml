<?xml version='1.0' encoding='UTF-8'?>
<!--

    Koya is an alfresco module that provides a corporate orientated dataroom.

    Copyright (C) Itl Developpement 2014

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see `<http://www.gnu.org/licenses/>`.

-->

<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>
<beans>
    <bean id="authenticationComponent" class="org.alfresco.repo.security.authentication.AuthenticationComponentImpl"
              parent="authenticationComponentBase">        
        <property name="authenticationDao">
            <ref bean="authenticationDao" />
        </property>
        <property name="authenticationManager">
            <ref bean="authenticationManager" />
        </property>
        <property name="allowGuestLogin">
            <value>${alfresco.authentication.allowGuestLogin}</value>
        </property>
        <property name="nodeService">
            <ref bean="nodeService" />
        </property>
        <property name="personService">
            <ref bean="personService" />
        </property>
        <property name="transactionService">
            <ref bean="transactionService" />
        </property>
        <!--                                                                  -->
        <!-- A list of default users with admin rights.                       -->
        <!--                                                                  -->
        <!-- If the security framework is case sensitive these values should  -->
        <!-- be case sensitive user names. If the security framework is not   -->
        <!-- case sensitive these values should be the lower-case user names. -->
        <!--                                                                  -->
        <!-- By default this includes:                                        -->
        <!--    admin (the user name of default alfresco admin user)          -->
        <!--    administrator (the windows default admin user)                -->
        <!--                                                                  -->
        <!-- This assumes that user names are not case sensitive.             -->
        <!--                                                                  -->
        <property name="defaultAdministratorUserNames">
            <set>
                <value>${alfresco_user_store.adminusername}</value>
                <value>administrator</value>
            </set>
        </property>
        <!--                                                                  -->
        <!-- A list of default users acting as guests.                        -->
        <!--                                                                  -->
        <!-- By default this includes:                                        -->
        <!--    guest (the user name of default alfresco guest user)          -->
        <!--                                                                  -->
        <!-- This assumes that user names are not case sensitive.             -->
        <!--                                                                  -->
        <property name="defaultGuestUserNames">
            <set>
                <value>${alfresco_user_store.guestusername}</value>
            </set>
        </property>
    </bean>

    <!-- Wrapped version to be used within subsystem -->
    <bean id="AuthenticationComponent" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="proxyInterfaces">
            <list>
                <value>org.alfresco.repo.security.authentication.AuthenticationComponent</value>
                <value>org.alfresco.repo.security.authentication.ntlm.NLTMAuthenticator</value>
            </list>
        </property>
        <property name="transactionManager">
            <ref bean="transactionManager" />
        </property>
        <property name="target">
            <ref bean="authenticationComponent" />
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="*">${server.transaction.mode.default}</prop>
            </props>
        </property>
    </bean>

    <bean id="authenticationDao" class="org.alfresco.repo.security.authentication.RepositoryAuthenticationDao">
        <property name="nodeService" ref="nodeService" />
        <property name="authorityService" ref="authorityService" />
        <property name="tenantService" ref="tenantService" />
        <property name="namespaceService" ref="namespaceService" />
        <property name="passwordEncoder" ref="passwordEncoder" />
        <property name="sha256PasswordEncoder" ref="sha256PasswordEncoder" />
        <property name="policyComponent" ref="policyComponent" />
        <property name="authenticationCache" ref="authenticationCache" />
        <property name="singletonCache" ref="immutableSingletonCache"/>
        <property name="transactionService">
            <ref bean="transactionService" />
        </property>
    </bean>

    <!-- Authentication service for chaining -->
    <!--   <bean id="localAuthenticationService" class="org.alfresco.repo.security.authentication.MutableAuthenticationServiceImpl">-->
    <bean id="localAuthenticationService" class="fr.itldev.koya.security.MutableAuthenticationServiceItlMail">
        <property name="authenticationDao">
            <ref bean="authenticationDao" />
        </property>
        <property name="ticketComponent">
            <ref bean="ticketComponent" />
        </property>
        <property name="authenticationComponent">
            <ref bean="authenticationComponent" />
        </property>
        <property name="sysAdminParams">
            <ref bean="sysAdminParams" />
        </property>
        <property name="userService">
            <ref bean="userService" />
        </property>
      
    </bean>

    <!-- CIFS authentication -->
    <bean id="cifsAuthenticator" class="org.alfresco.filesys.auth.cifs.EnterpriseCifsAuthenticator" parent="cifsAuthenticatorBase">
        <property name="active">
            <value>${alfresco.authentication.authenticateCIFS}</value>
        </property>

        <property name="sessionCleanup">
            <value>${alfresco.authentication.sessionCleanup}</value>
        </property>
    </bean>

    <!--                                                                    -->
    <!-- The Acegi authentication manager.                                  -->
    <!--                                                                    -->
    <!-- Provders are asked to authenticate in order.                       -->
    <!-- First, is a provider that checks if an acegi authentication object -->
    <!-- is already bound to the executing thread. If it is, and it is set  -->
    <!-- as authenticated then no further authentication is required. If    -->
    <!-- this is absent, Acegi validates the password for every method      -->
    <!-- invocation, which is too CPU expensive. If we set an               -->
    <!-- authentication based on a ticket etc .... or we want to set the    -->
    <!-- the system user as the current user ... we do not have the         -->
    <!-- password. So if we have set an authentication and set it as        -->
    <!-- authenticated that is sufficient to validate the user.             -->
    <!--                                                                    -->
    <!-- If the authentication bound to the current thread is not set as    -->
    <!-- authenticated the standard Acegi DAO Authentication provider       -->
    <!-- is used to authenticate.                                           -->
    <!--                                                                    -->

    <bean id="authenticationManager" class="net.sf.acegisecurity.providers.ProviderManager">
        <property name="providers">
            <list>
                <ref bean="authenticatedAuthenticationPassthroughProvider" />
                <ref bean="daoAuthenticationProvider" />
            </list>
        </property>
    </bean>

    <!-- We provide a DAO to plug into the Acegi DaoAuthenticationProvider  -->

    <bean id="daoAuthenticationProvider" class="net.sf.acegisecurity.providers.dao.DaoAuthenticationProvider">
        <property name="authenticationDao">
            <ref bean="authenticationDao" />
        </property>
        <property name="saltSource">
            <ref bean="saltSource" />
        </property>
        <property name="passwordEncoder">
            <ref bean="passwordEncoder" />
        </property>
    </bean>

    <!-- The DAO also acts as a salt provider.                              -->

    <alias alias="saltSource" name="authenticationDao" />

</beans>